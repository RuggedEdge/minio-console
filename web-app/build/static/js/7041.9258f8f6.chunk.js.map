{"version":3,"file":"static/js/7041.9258f8f6.chunk.js","mappings":"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","sources":["screens/Console/IDP/AddIDPConfigurationHelpbox.tsx","screens/Console/IDP/AddIDPConfiguration.tsx","screens/Console/IDP/AddIDPOpenIDConfiguration.tsx","screens/Console/IDP/utils.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport { HelpIconFilled, Box } from \"mds\";\n\ninterface IContent {\n  icon: React.ReactNode;\n  text: string;\n  iconDescription: string;\n}\n\ninterface IAddIDPConfigurationHelpBoxProps {\n  helpText: string;\n  docLink: string;\n  docText: string;\n  contents: IContent[];\n}\n\nconst FeatureItem = ({\n  icon,\n  description,\n}: {\n  icon: any;\n  description: string;\n}) => {\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        \"& .min-icon\": {\n          marginRight: \"10px\",\n          height: \"23px\",\n          width: \"23px\",\n          marginBottom: \"10px\",\n        },\n      }}\n    >\n      {icon}{\" \"}\n      <div style={{ fontSize: \"14px\", fontStyle: \"italic\", color: \"#5E5E5E\" }}>\n        {description}\n      </div>\n    </Box>\n  );\n};\n\nconst AddIDPConfigurationHelpBox = ({\n  helpText,\n  docLink,\n  docText,\n  contents,\n}: IAddIDPConfigurationHelpBoxProps) => {\n  return (\n    <Box\n      sx={{\n        flex: 1,\n        border: \"1px solid #eaeaea\",\n        borderRadius: \"2px\",\n        display: \"flex\",\n        flexFlow: \"column\",\n        padding: \"20px\",\n      }}\n    >\n      <Box\n        sx={{\n          fontSize: \"16px\",\n          fontWeight: 600,\n          display: \"flex\",\n          alignItems: \"center\",\n          marginBottom: \"16px\",\n          paddingBottom: \"20px\",\n\n          \"& .min-icon\": {\n            height: \"21px\",\n            width: \"21px\",\n            marginRight: \"15px\",\n          },\n        }}\n      >\n        <HelpIconFilled />\n        <div>{helpText}</div>\n      </Box>\n      <Box sx={{ fontSize: \"14px\", marginBottom: \"15px\" }}>\n        {contents.map((content, index) => (\n          <Fragment key={`feature-item-${index}`}>\n            {content.icon && (\n              <Box sx={{ paddingBottom: \"20px\" }}>\n                <FeatureItem\n                  icon={content.icon}\n                  description={content.iconDescription}\n                />\n              </Box>\n            )}\n            <Box sx={{ paddingBottom: \"20px\" }}>{content.text}</Box>\n          </Fragment>\n        ))}\n        <Box sx={{ paddingBottom: \"20px\" }}>\n          <a href={docLink} target=\"_blank\" rel=\"noopener\">\n            {docText}\n          </a>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default AddIDPConfigurationHelpBox;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport {\n  BackLink,\n  Button,\n  FormLayout,\n  Grid,\n  InputBox,\n  PageLayout,\n  SectionTitle,\n  Switch,\n} from \"mds\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAppDispatch } from \"../../../store\";\nimport { modalStyleUtils } from \"../Common/FormComponents/common/styleLibrary\";\nimport {\n  setErrorSnackMessage,\n  setHelpName,\n  setServerNeedsRestart,\n} from \"../../../systemSlice\";\nimport PageHeaderWrapper from \"../Common/PageHeaderWrapper/PageHeaderWrapper\";\nimport HelpMenu from \"../HelpMenu\";\nimport { api } from \"api\";\nimport { ApiError, HttpResponse, SetIDPResponse } from \"api/consoleApi\";\nimport { errorToHandler } from \"api/errors\";\n\ntype AddIDPConfigurationProps = {\n  classes?: any;\n  icon: React.ReactNode;\n  helpBox: React.ReactNode;\n  header: string;\n  title: string;\n  backLink: string;\n  formFields: object;\n};\n\nconst AddIDPConfiguration = ({\n  icon,\n  helpBox,\n  header,\n  backLink,\n  title,\n  formFields,\n}: AddIDPConfigurationProps) => {\n  const extraFormFields = {\n    name: {\n      required: true,\n      hasError: (s: string, editMode: boolean) => {\n        return !s && editMode ? \"Config Name is required\" : \"\";\n      },\n      label: \"Name\",\n      tooltip: \"Name for identity provider configuration\",\n      placeholder: \"Name\",\n      type: \"text\",\n    },\n    ...formFields,\n  };\n\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n\n  const [fields, setFields] = useState<any>({});\n  const [loadingCreate, setLoadingCreate] = useState<boolean>(false);\n\n  const validSave = () => {\n    for (const [key, value] of Object.entries(extraFormFields)) {\n      if (\n        value.required &&\n        !(\n          fields[key] !== undefined &&\n          fields[key] !== null &&\n          fields[key] !== \"\"\n        )\n      ) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const resetForm = () => {\n    setFields({});\n  };\n\n  const addRecord = (event: React.FormEvent) => {\n    setLoadingCreate(true);\n    event.preventDefault();\n    const name = fields[\"name\"];\n    let input = \"\";\n    for (const key of Object.keys(formFields)) {\n      if (fields[key]) {\n        input += `${key}=${fields[key]} `;\n      }\n    }\n\n    api.idp\n      .createConfiguration(\"openid\", { name, input })\n      .then((res: HttpResponse<SetIDPResponse, ApiError>) => {\n        navigate(backLink);\n        dispatch(setServerNeedsRestart(res.data.restart === true));\n      })\n      .catch((res: HttpResponse<SetIDPResponse, ApiError>) => {\n        dispatch(setErrorSnackMessage(errorToHandler(res.error)));\n      })\n      .finally(() => setLoadingCreate(false));\n  };\n\n  const renderFormField = (key: string, value: any) => {\n    switch (value.type) {\n      case \"toggle\":\n        return (\n          <Switch\n            indicatorLabels={[\"Enabled\", \"Disabled\"]}\n            checked={fields[key] === \"on\" ? true : false}\n            value={\"is-field-enabled\"}\n            id={\"is-field-enabled\"}\n            name={\"is-field-enabled\"}\n            label={value.label}\n            tooltip={value.tooltip}\n            onChange={(e) =>\n              setFields({ ...fields, [key]: e.target.checked ? \"on\" : \"off\" })\n            }\n            description=\"\"\n          />\n        );\n      default:\n        return (\n          <InputBox\n            id={key}\n            required={value.required}\n            name={key}\n            label={value.label}\n            tooltip={value.tooltip}\n            error={value.hasError(fields[key], true)}\n            value={fields[key] ? fields[key] : \"\"}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              setFields({ ...fields, [key]: e.target.value })\n            }\n            placeholder={value.placeholder}\n            type={value.type}\n          />\n        );\n    }\n  };\n\n  useEffect(() => {\n    dispatch(setHelpName(\"add_idp_config\"));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Grid item xs={12}>\n      <PageHeaderWrapper\n        label={<BackLink onClick={() => navigate(backLink)} label={header} />}\n        \n      />\n      <PageLayout>\n        <FormLayout helpBox={helpBox}>\n          <SectionTitle icon={icon}>{title}</SectionTitle>\n          <form\n            noValidate\n            autoComplete=\"off\"\n            onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n              addRecord(e);\n            }}\n          >\n            <Grid container>\n              <Grid xs={12} item>\n                {Object.entries(extraFormFields).map(([key, value]) =>\n                  renderFormField(key, value),\n                )}\n                <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n                  <Button\n                    id={\"clear\"}\n                    type=\"button\"\n                    variant=\"regular\"\n                    onClick={resetForm}\n                    label={\"Clear\"}\n                  />\n\n                  <Button\n                    id={\"save-key\"}\n                    type=\"submit\"\n                    variant=\"callAction\"\n                    color=\"primary\"\n                    disabled={loadingCreate || !validSave()}\n                    label={\"Save\"}\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n          </form>\n        </FormLayout>\n      </PageLayout>\n    </Grid>\n  );\n};\n\nexport default AddIDPConfiguration;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { IAM_PAGES } from \"../../../common/SecureComponent/permissions\";\nimport { LockIcon } from \"mds\";\nimport AddIDPConfiguration from \"./AddIDPConfiguration\";\nimport { openIDFormFields, openIDHelpBoxContents } from \"./utils\";\nimport AddIDPConfigurationHelpBox from \"./AddIDPConfigurationHelpbox\";\n\nconst AddIDPOpenIDConfiguration = () => {\n  return (\n    <AddIDPConfiguration\n      icon={<LockIcon />}\n      helpBox={\n        <AddIDPConfigurationHelpBox\n          helpText={\"Learn more about OpenID Connect Configurations\"}\n          contents={openIDHelpBoxContents}\n          docLink={\n            \"https://min.io/docs/minio/linux/operations/external-iam.html?ref=con#minio-external-iam-oidc\"\n          }\n          docText={\"Learn more about OpenID Connect Configurations\"}\n        />\n      }\n      header={\"OpenID Configurations\"}\n      backLink={IAM_PAGES.IDP_OPENID_CONFIGURATIONS}\n      title={\"Create OpenID Configuration\"}\n      formFields={openIDFormFields}\n    />\n  );\n};\n\nexport default AddIDPOpenIDConfiguration;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { LockIcon, LoginIcon } from \"mds\";\n\nexport const ldapHelpBoxContents = [\n  {\n    text: \"MinIO supports using an Active Directory or LDAP (AD/LDAP) service for external management of user identities. Configuring an external IDentity Provider (IDP) enables Single-Sign On (SSO) workflows, where applications authenticate against the external IDP before accessing MinIO.\",\n    icon: <LoginIcon />,\n    iconDescription: \"Create Configurations\",\n  },\n  {\n    text: \"MinIO queries the configured Active Directory / LDAP server to verify the credentials specified by the application and optionally return a list of groups in which the user has membership. MinIO supports two modes (Lookup-Bind Mode and Username-Bind Mode) for performing these queries\",\n    icon: null,\n    iconDescription: \"\",\n  },\n  {\n    text: \"MinIO recommends using Lookup-Bind mode as the preferred method for verifying AD/LDAP credentials. Username-Bind mode is a legacy method retained for backwards compatibility only.\",\n    icon: null,\n    iconDescription: \"\",\n  },\n];\n\nexport const openIDHelpBoxContents = [\n  {\n    text: \"MinIO supports using an OpenID Connect (OIDC) compatible IDentity Provider (IDP) such as Okta, KeyCloak, Dex, Google, or Facebook for external management of user identities.\",\n    icon: <LockIcon />,\n    iconDescription: \"Create Configurations\",\n  },\n  {\n    text: \"Configuring an external IDP enables Single-Sign On workflows, where applications authenticate against the external IDP before accessing MinIO.\",\n    icon: null,\n    iconDescription: \"\",\n  },\n];\n\nexport const openIDFormFields = {\n  config_url: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Config URL is required\" : \"\";\n    },\n    label: \"Config URL\",\n    tooltip: \"Config URL for identity provider configuration\",\n    placeholder:\n      \"https://identity-provider-url/.well-known/openid-configuration\",\n    type: \"text\",\n    editOnly: false,\n  },\n  client_id: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Client ID is required\" : \"\";\n    },\n    label: \"Client ID\",\n    tooltip: \"Identity provider Client ID\",\n    placeholder: \"Enter Client ID\",\n    type: \"text\",\n    editOnly: false,\n  },\n  client_secret: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Client Secret is required\" : \"\";\n    },\n    label: \"Client Secret\",\n    tooltip: \"Identity provider Client Secret\",\n    placeholder: \"Enter Client Secret\",\n    type: \"password\",\n    editOnly: true,\n  },\n  claim_name: {\n    required: false,\n    label: \"Claim Name\",\n    tooltip: \"Claim from which MinIO will read the policy or role to use\",\n    placeholder: \"Enter Claim Name\",\n    type: \"text\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  display_name: {\n    required: false,\n    label: \"Display Name\",\n    tooltip: \"\",\n    placeholder: \"Enter Display Name\",\n    type: \"text\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  claim_prefix: {\n    required: false,\n    label: \"Claim Prefix\",\n    tooltip: \"\",\n    placeholder: \"Enter Claim Prefix\",\n    type: \"text\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  scopes: {\n    required: false,\n    label: \"Scopes\",\n    tooltip: \"\",\n    placeholder: \"openid,profile,email\",\n    type: \"text\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  redirect_uri: {\n    required: false,\n    label: \"Redirect URI\",\n    tooltip: \"\",\n    placeholder: \"https://console-endpoint-url/oauth_callback\",\n    type: \"text\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  role_policy: {\n    required: false,\n    label: \"Role Policy\",\n    tooltip: \"\",\n    placeholder: \"readonly\",\n    type: \"text\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  claim_userinfo: {\n    required: false,\n    label: \"Claim User Info\",\n    tooltip: \"\",\n    placeholder: \"Claim User Info\",\n    type: \"toggle\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  redirect_uri_dynamic: {\n    required: false,\n    label: \"Redirect URI Dynamic\",\n    tooltip: \"\",\n    placeholder: \"Redirect URI Dynamic\",\n    type: \"toggle\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n};\n\nexport const ldapFormFields = {\n  server_insecure: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Server Address is required\" : \"\";\n    },\n    label: \"Server Insecure\",\n    tooltip: \"Disable SSL certificate verification \",\n    placeholder: \"myldapserver.com:636\",\n    type: \"toggle\",\n    editOnly: false,\n  },\n  server_addr: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Server Address is required\" : \"\";\n    },\n    label: \"Server Address\",\n    tooltip: 'AD/LDAP server address e.g. \"myldapserver.com:636\"',\n    placeholder: \"myldapserver.com:636\",\n    type: \"text\",\n    editOnly: false,\n  },\n  lookup_bind_dn: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Lookup Bind DN is required\" : \"\";\n    },\n    label: \"Lookup Bind DN\",\n    tooltip:\n      \"DN (Distinguished Name) for LDAP read-only service account used to perform DN and group lookups\",\n    placeholder: \"cn=admin,dc=min,dc=io\",\n    type: \"text\",\n    editOnly: false,\n  },\n  lookup_bind_password: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Lookup Bind Password is required\" : \"\";\n    },\n    label: \"Lookup Bind Password\",\n    tooltip:\n      \"Password for LDAP read-only service account used to perform DN and group lookups\",\n    placeholder: \"admin\",\n    type: \"password\",\n    editOnly: true,\n  },\n  user_dn_search_base_dn: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"User DN Search Base DN is required\" : \"\";\n    },\n    label: \"User DN Search Base\",\n    tooltip: \"\",\n    placeholder: \"DC=example,DC=net\",\n    type: \"text\",\n    editOnly: false,\n  },\n  user_dn_search_filter: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"User DN Search Filter is required\" : \"\";\n    },\n    label: \"User DN Search Filter\",\n    tooltip: \"\",\n    placeholder: \"(sAMAccountName=%s)\",\n    type: \"text\",\n    editOnly: false,\n  },\n  group_search_base_dn: {\n    required: false,\n    hasError: (s: string, editMode: boolean) => \"\",\n    label: \"Group Search Base DN\",\n    tooltip: \"\",\n    placeholder: \"ou=swengg,dc=min,dc=io\",\n    type: \"text\",\n    editOnly: false,\n  },\n  group_search_filter: {\n    required: false,\n    hasError: (s: string, editMode: boolean) => \"\",\n    label: \"Group Search Filter\",\n    tooltip: \"\",\n    placeholder: \"(&(objectclass=groupofnames)(member=%d))\",\n    type: \"text\",\n    editOnly: false,\n  },\n};\n"],"names":["FeatureItem","_ref","icon","description","_jsxs","Box","sx","display","marginRight","height","width","marginBottom","children","_jsx","style","fontSize","fontStyle","color","_ref2","helpText","docLink","docText","contents","flex","border","borderRadius","flexFlow","padding","fontWeight","alignItems","paddingBottom","HelpIconFilled","map","content","index","Fragment","iconDescription","text","href","target","rel","helpBox","header","backLink","title","formFields","extraFormFields","name","required","hasError","s","editMode","label","tooltip","placeholder","type","navigate","useNavigate","dispatch","useAppDispatch","fields","setFields","useState","loadingCreate","setLoadingCreate","useEffect","setHelpName","Grid","item","xs","PageHeaderWrapper","BackLink","onClick","PageLayout","FormLayout","SectionTitle","noValidate","autoComplete","onSubmit","e","event","preventDefault","input","key","Object","keys","api","idp","createConfiguration","then","res","setServerNeedsRestart","data","restart","catch","setErrorSnackMessage","errorToHandler","error","finally","addRecord","container","entries","value","renderFormField","Switch","indicatorLabels","checked","id","onChange","InputBox","modalStyleUtils","modalButtonBar","Button","variant","resetForm","disabled","validSave","undefined","AddIDPOpenIDConfiguration","AddIDPConfiguration","LockIcon","AddIDPConfigurationHelpBox","openIDHelpBoxContents","IAM_PAGES","IDP_OPENID_CONFIGURATIONS","openIDFormFields","ldapHelpBoxContents","LoginIcon","config_url","editOnly","client_id","client_secret","claim_name","display_name","claim_prefix","scopes","redirect_uri","role_policy","claim_userinfo","redirect_uri_dynamic","ldapFormFields","server_insecure","server_addr","lookup_bind_dn","lookup_bind_password","user_dn_search_base_dn","user_dn_search_filter","group_search_base_dn","group_search_filter"],"sourceRoot":""}